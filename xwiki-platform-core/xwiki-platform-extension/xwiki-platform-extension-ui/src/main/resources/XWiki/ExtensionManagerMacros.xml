<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>XWiki</web>
  <name>ExtensionManagerMacros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>XWiki.AdminSheet</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1321509118000</creationDate>
  <date>1332154820000</date>
  <contentUpdateDate>1332154820000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>XWiki.ExtensionManagerMacros</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>ce6647d0-aa85-4972-a890-a76e852f7be6</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var XWiki = (function (XWiki) {
// Start XWiki augmentation.
/**
 * Enhances the behaviour of an extension.
 */
XWiki.ExtensionBehaviour = Class.create({
  initialize : function (container) {
    // Make sure the extension is not already initialized.
    this.finalize();

    this.container = container;

    // Handle extension details.
    this._enhanceShowDetailsBehaviour();

    // Asynchronous fetch of install/uninstall plan.
    this._enhanceInstallBehaviour();
    this._enhanceUninstallBehaviour();

    // Enhances the behaviour of the extension details menu (Description/Dependencies/Progress).
    this._enhanceMenuBehaviour();

    // Enhances the behaviour of the Dependencies section.
    this._enhanceDependenciesBehaviour();

    // Enhances the behaviour of the Progress section.
    this._enhanceProgressBehaviour();
  },

  /**
   * Releases the event listeners and detaches the extension.
   */
  finalize : function() {
    this.container &amp;&amp; this.container.remove();
    this.container = undefined;
  },

  /**
   * Returns the URL of the service used to retrieve extension details and to install/uninstall extensions.
   */
  _getServiceURL : function(serviceDocument) {
    if (serviceDocument) {
      serviceDocument = XWiki.getResource(serviceDocument);
      serviceDocument = new XWiki.Document(serviceDocument.name, serviceDocument.space, serviceDocument.wiki);
    } else {
      serviceDocument = XWiki.currentDocument;
    }
    return serviceDocument.getURL('get');
  },

  /**
   * Submit a form asynchronously.
   */
  _submit : function(event, ajaxRequestParameters) {
    event.stop();

    // Ignore consecutive requests, just handle the first one.
    var form = event.element().form;
    if (form.__disabled) {
      return false;
    }
    form.__disabled = true;

    // Prepare the data for the AJAX call.
    var formData = new Hash(form.serialize({submit: event.element().name}));

    // Default AJAX request parameters.
    var defaultAJAXRequestParameters = {
      parameters : formData,
      onFailure : function (response) {
        var failureReason = response.statusText;
        if (response.statusText == '' /* No response */ || response.status == 12031 /* In IE */) {
          failureReason = 'Server not responding';
        }
        new XWiki.widgets.Notification("$msg.get('extensions.info.fetch.failed')" + failureReason, "error");
      },
      on0 : function (response) {
        response.request.options.onFailure(response);
      },
      onComplete : function() {
        // Re-enable the button.
        form.__disabled = false;
      }
    }

    // Inject a reference to the (cloned) default AJAX request parameters to be able
    // to access the defaults even when they are overwritten by the provided values.
    defaultAJAXRequestParameters.defaultValues = Object.clone(defaultAJAXRequestParameters);

    // Launch the AJAX call.
    new Ajax.Request(this._getServiceURL(formData.get('section')), Object.extend(defaultAJAXRequestParameters, ajaxRequestParameters));
  },

  _update : function(html) {
    // Replace the current extension container element with the one that was just fetched.
    this.container.addClassName('hidden');
    this.container.insert({after : html});
    // Attach behaviour to the new element.
    this.initialize(this.container.next());
  },

  /**
   * Load the extension details asynchronously.
   */
  _onShowDetails : function(event) {
    // Launch the AJAX call to fetch extension details.
    this._submit(event, {
      onCreate : function() {
        // Don't panic, the content is loading.
        this.container.insert({bottom: new Element('div', {'class' : 'extension-body loading'})});
      }.bind(this),
      onSuccess : function(response) {
        this._update(response.responseText);
      }.bind(this),
      onComplete : function(response) {
        response.request.options.defaultValues.onComplete(response);
        // Remove the loading marker if it's still there (i.e. fetching failed).
        var loadingMarker = this.container.down('.extension-body.loading');
        loadingMarker &amp;&amp; loadingMarker.remove();
      }.bind(this)
    });
  },

  /**
   * Enables the asynchronous loading of extension details and the show/hide extension details toggle.
   */
  _enhanceShowDetailsBehaviour : function() {
    var showDetailsButton = this.container.down('input[name="actionshowdetails"]');
    if (showDetailsButton) {
      // Load the extension details asynchronously.
      showDetailsButton.observe('click', this._onShowDetails.bindAsEventListener(this));
    } else {
      showDetailsButton = this.container.down('input[name="showdetails"]');
      if (!showDetailsButton) {
        return;
      }
      // Show/hide extension details toggle.
      showDetailsButton = showDetailsButton.up();
      var hideDetailsButton = this.container.down('input[name="hidedetails"]').up();
      showDetailsButton.__otherButton = hideDetailsButton;
      hideDetailsButton.__otherButton = showDetailsButton;
      this.container.select('.visibilityAction').invoke('observe', 'click', this._onToggleShowHideDetails.bindAsEventListener(this));
      showDetailsButton.remove();
    }
  },

  /**
   * Toggles the visibility of the extension details.
   */
  _onToggleShowHideDetails : function(event) {
    event.stop();
    var button = event.element().up('span');
    this.container.down('.extension-body').toggleClassName('hidden');
    button.replace(button.__otherButton);
  },

  /**
   * Enhances the behaviour of the install button: computes the install plan asynchronously.
   */
  _enhanceInstallBehaviour : function() {
    var installButton = this.container.down('input[name="actioninstall"]');
    installButton &amp;&amp; installButton.observe('click', this._retrieveInstallOrUninstallPlan.bindAsEventListener(this));
  },

  /**
   * Enhances the behaviour of the uninstall button: computes the uninstall plan asynchronously.
   */
  _enhanceUninstallBehaviour : function() {
    var uninstallButton = this.container.down('input[name="actionuninstall"]');
    uninstallButton &amp;&amp; uninstallButton.observe('click', this._retrieveInstallOrUninstallPlan.bindAsEventListener(this));
  },

  /**
   * Indicate to the user that the install/uninstall plan is being fetched.
   */
  _onBeforeRetrieveInstallOrUninstallPlan : function() {
    // Check if the extension details have been fetched.
    var extensionBody = this.container.down('.extension-body');
    if (extensionBody) {
      // Make sure the extension details are visible.
      extensionBody.hasClassName('hidden') &amp;&amp; this._onToggleShowHideDetails({
        stop : function() {},
        element : function() {return this.container.down('input[name="showdetails"]')}.bind(this)
      });
      // Check if the progress section is available.
      var progressSection = extensionBody.down('.extension-body-progress');
      if (!progressSection) {
        // Add an empty progress section.
        var lastSection = extensionBody.select('.extension-body-section').last();
        progressSection = new Element('div', {'class': 'extension-body-progress extension-body-section loading'});
        lastSection.insert({after: progressSection});
        // Add the section anchor.
        var progressSectionAnchor = 'extension-body-progress' + lastSection.previous().id.substr($w(lastSection.className)[0].length);
        lastSection.insert({after: new Element('div', {id: progressSectionAnchor})});
        // Add the progress menu.
        extensionBody.down('.innerMenu').insert('&lt;li&gt;&lt;span class="wikilink"&gt;&lt;a href="#' + progressSectionAnchor + '"&gt;$msg.get('extensions.info.category.progress')&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;');
      } else {
        // Hide the contents of the progress section and display the loading animation.
        progressSection.insert({before: progressSection.clone(false)});
        progressSection = progressSection.previous();
        progressSection.addClassName('loading');
      }
      // Activate the progress section.
      this._activateMenuItem(extensionBody.down('.innerMenu li a[href="#' + progressSection.previous().id + '"]'));
    } else {
      this.container.insert({bottom: new Element('div', {'class' : 'extension-body loading'})});
    }
  },

  _onAfterRetrieveInstallOrUninstallPlan : function(response) {
    response.request.options.defaultValues.onComplete(response);
    // Remove the loading markers if they are still present (i.e. request failed).
    var extensionBodyLoading = this.container.down('.extension-body.loading');
    if (extensionBodyLoading) {
      extensionBodyLoading.remove();
    } else {
      var progressSectionLoading = this.container.down('.extension-body-progress.loading');
      if (progressSectionLoading) {
        // If the progress section is hidden, re-display it.
        var progressSection = progressSectionLoading.previous();
        if (progressSection.hasClassName('extension-body-progress')) {
          progressSectionLoading.remove();
          progressSection.show();
        } else {
          progressSectionLoading.removeClassName('loading');
        }
      }
    }
  },

  /**
   * Retrieves the install or uninstall plan asynchronously.
   */
  _retrieveInstallOrUninstallPlan : function(event) {
    // Launch the AJAX call to fetch the install/uninstall plan.
    this._submit(event, {
      onCreate : this._onBeforeRetrieveInstallOrUninstallPlan.bind(this),
      onSuccess : function(response) {
        this._update(response.responseText);
      }.bind(this),
      onComplete : this._onAfterRetrieveInstallOrUninstallPlan.bind(this)
    });
  },

  /**
   * Enhances the behaviour of the extension details menu (Description/Dependencies/Progress).
   */
  _enhanceMenuBehaviour : function() {
    var menuItemSelector = '.innerMenu li a';
    // Expand the current menu item.
    var currentMenuItem = this.container.down(menuItemSelector + '.current');
    if (!currentMenuItem) {
      // Expand the first menu item.
      currentMenuItem = this.container.down(menuItemSelector);
    }
    if (currentMenuItem) {
      this._activateMenuItem(currentMenuItem);
      // Make the activation of menu items persistent.
      this.container.select(menuItemSelector).invoke('observe', 'click', function(event) {
        event.stop();
        this._activateMenuItem(event.element());
      }.bindAsEventListener(this));
    }
  },

  _activateMenuItem : function(menuItem) {
    // Hide all sections (each section is associated with a menu item).
    this.container.select('.extension-body-section').invoke('setStyle', {'display' : 'none'});
    // Unmark the currently active menu item.
    var currentMenuItem = this.container.down('.innerMenu li a.current');
    if (currentMenuItem) {
       currentMenuItem.removeClassName('current');
    }
    // Display the section associated with the given menu item (the menu item that was clicked).
    // (the href attribute is expected be "#id-of-an-anchor-placed-before-the-section-to-display)
    $(menuItem.getAttribute('href').substring(1)).next('.extension-body-section').setStyle({'display' : 'block'});
    // Mark the given menu item as active (i.e. select the menu item that was clicked).
    menuItem.addClassName('current');
  },

  /**
   * Enhances the behaviour of the Dependencies section within the extension details.
   */
  _enhanceDependenciesBehaviour : function() {
    // Fix dependencies links when the extension details are loaded asynchronously in the administration section.
    this.container.select(".extension-body-dependencies a").each(function (link) {
      var action = XWiki.currentDocument.page == 'XWikiPreferences' ? 'admin' : 'view';
      var queryString = link.getAttribute('href').replace(/.*\?/, '');
      link.setAttribute('href', XWiki.currentDocument.getURL(action, queryString));
    });
  },

  /**
   * Enhances the behaviour of the Progress section within the extension details.
   */
  _enhanceProgressBehaviour : function() {
    // Toggle stack trace display in extension log.
    this.container.select('.extension-log-item').each(function (logItem) {
      // If the log item has details.
      if (logItem.down('div')) {
        var logMessage = logItem.down('p');
        logMessage.observe('click', function() {
          logItem.toggleClassName('extension-log-item-expanded');
        });
      }
    });
  }
});


/**
 * Enhances the behaviour of the extension search form.
 */
XWiki.ExtensionSearchFormBehaviour = Class.create({
  initialize : function () {
    this._enhanceSimpleSearch();
    this._enhanceAdvancedSearch();
  },

  _enhanceSimpleSearch : function() {
    var simpleSearchBox = $('extension-search-simple');
    if (!simpleSearchBox) {
      return;
    }
    // Submit the search form whenever the user selects a different repository.
    $('extensionSearchRepositoryList').observe('change', function(event) {
      // Make sure we don't submit the search tip.
      $('extensionSearchInput').focus();
      // Defer the submit so that the search input is properly focused.
      var form = event.element().form;
      form.submit.bind(form).defer();
    }.bindAsEventListener(this));
  },

  _enhanceAdvancedSearch : function() {
    var advancedSearchBox = $('extension-search-advanced');
    if (!advancedSearchBox) {
      return;
    }
    var advancedSearchTrigger = advancedSearchBox.down('legend a');//ry :)
    if (advancedSearchTrigger) {
      var target = advancedSearchTrigger.up('legend').next();
      if (target) {
        advancedSearchTrigger.observe('click', function(event) {
          event.stop();
          advancedSearchTrigger.blur();
          target.toggleClassName('hidden');
          advancedSearchTrigger.toggleClassName('expanded');
        });
        var cancelTrigger = target.down('a.actioncancel');
        if (cancelTrigger) {
          cancelTrigger.observe('click', function(event) {
            event.stop();
            cancelTrigger.up('form').select('input[type=text]').each(function(input) {
              input.value = '';
            });
            advancedSearchTrigger.click();
          });
        }
      }
    }
  }
});


function init() {
  new XWiki.ExtensionSearchFormBehaviour();
  $$('.extension-item').each(function (extension) {
    new XWiki.ExtensionBehaviour(extension);
  });
  return true;
}

// When the document is loaded, trigger the Extension Manager form enhancements.
(XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);

// End XWiki augmentation.
return XWiki;
}(XWiki || {}));</code>
    </property>
    <property>
      <name>Code</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>XWiki.ExtensionManagerMacros</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>9a7ab38c-4990-415a-beed-6968710f3b02</guid>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')
.extension-item {
  border-color: $theme.borderColor $theme.pageContentBackgroundColor $theme.pageContentBackgroundColor $theme.borderColor;
  border-style: solid solid solid;
  border-width: 1px 4px 1px 1px;
  display: block;
  -moz-box-shadow: 1px 0 0 $theme.borderColor;
  -webkit-box-shadow:  1px 0 0 $theme.borderColor;
  box-shadow:  1px 0 0 $theme.borderColor;
  margin-right: 1px;
  position: relative;
}
.extension-item &gt; * {
  padding: 0.8em 1em 1em 2.7em;
}
.extension-item:last-of-type {
  border-bottom-color: $theme.borderColor;
}

.extension-name {
  color: $theme.titleColor;
  font-size: 1.2em;
  font-weight: 700;
  border: none;
  background: none no-repeat scroll 0.2em 0.3em transparent;
  margin: 0 0 0 -1.8em;
  padding: 2px 0 2px 1.8em;
}

.extension-version {
  color: $theme.textSecondaryColor;
  margin-left: 1em;
  font-weight: normal;
  font-size: .8em;
}

.extension-item:hover .extension-header {
  background-color: $theme.highlightColor;
}
.extension-header .buttonwrapper {
  margin: 0 0 0 5px;
}

.extension-header-right {
  float: right;
  text-align: right;
}

.extension-status {
  font-size: 0.8em;
}
.extension-header-right .extension-status {
  margin: -2em 0 1em;
}

.extension-authors {
  color: $theme.textSecondaryColor;
  font-size: .9em;
}

.extension-item-core .extension-status, .extension-item-installed .extension-status {
  color: $theme.notificationSuccessColor;
}
.extension-item-remote-installed .extension-status {
  color: $theme.notificationWarningColor;
}
.extension-item-remote-core .extension-status {
  color: $theme.notificationErrorColor;
}

.extension-description {
  font-size: .9em;
  white-space: pre-wrap;
  word-wrap: break-word;
}

.extension-body {
  border: 1px dotted $theme.borderColor;;
  padding: 0 .8em .8em 1.8em !important;
  margin: 0 1em 1em;
}
.extension-body.loading {
  padding: 16px !important;
}

*[id^="extension-body-"]:target {
  display: none;
}
*[class^="extension-body-"] {
  display: none;
  font-size: 0.9em;
  /* Make sure we have space for the loading animation. */
  min-height: 16px;
}
*[id^="extension-body-"]:target + *[class^="extension-body-"] {
  display: block;
}

ul.extension-metadata {
  list-style-type: none;
  margin: 0;
}
ul.extension-metadata li {
  padding-top: 0.5em;
}

.extension-body-dependencies ul, .extension-body-progress ul {
  border-top: 1px dotted #E8E8E8;
  list-style-type: none;
  margin: 0;
}
.extension-body-dependencies li:hover, .extension-body-progress li:hover {
  background-color: $theme.highlightColor;
}
.dependency-item, .extension-log-item {
  background: transparent none no-repeat left;
  border-bottom: 1px dotted #E8E8E8;
  border-right: 7px solid $theme.pageContentBackgroundColor;
  padding: 0.3em 0 0.3em 20px;
  position: relative;
}
.dependency-item &gt; p, .extension-log-item &gt; p {
  margin: 0;
}
.extension-item-core .extension-name, .extension-item-remote-core .extension-name,
.dependency-item.extension-item-core, .dependency-item.extension-item-remote-core {
  background-image: url("$xwiki.getSkinFile('icons/silk/cog.png')");
}
.extension-item-installed .extension-name, .extension-item-remote-installed .extension-name,
.dependency-item.extension-item-installed, .dependency-item.extension-item-remote-installed {
  background-image: url("$xwiki.getSkinFile('icons/silk/plugin.png')");
}
.extension-item-remote .extension-name, .dependency-item.extension-item-remote {
  background-image: url("$xwiki.getSkinFile('icons/silk/world.png')");
}
.dependency-item.extension-item-unknown {
  background-image: url("$xwiki.getSkinFile('icons/silk/plugin_error.png')");
}
.dependency-item .extension-status {
  position: absolute;
  right: 1.5em;
}

.extension-item-core, .extension-item-installed {
  border-right-color: $theme.notificationSuccessColor;
}
.extension-item-remote-installed {
  border-right-color: $theme.notificationWarningColor;
}
.extension-item-remote-core {
  border-right-color: $theme.notificationErrorColor;
}

.extension-body-progress ul {
  margin-top: .5em;
}
.extension-log-item {
  background-position: left .3em;
}
.extension-log-item-info {
  background-image: url("$xwiki.getSkinFile('icons/silk/information.png')");
  color: $theme.notificationInfoColor;
}
.extension-log-item-warn {
  background-image: url("$xwiki.getSkinFile('icons/silk/error.png')");
  color: $theme.notificationWarningColor;
}
.extension-log-item-error {
  background-image: url("$xwiki.getSkinFile('icons/silk/exclamation.png')");
  color: $theme.notificationErrorColor;
}
.extension-log-item &gt; div {
  /* Hide log details by default */
  display: none;
}
.extension-log-item-expanded &gt; div {
  display: block;
}

.extension-search-bar {
  background-color: $theme.panelCollapsedBackgroundColor;
  border: 1px solid $theme.borderColor;
  border-bottom: 0;
  color: $theme.panelCollapsedTextColor;
  font-size: .8em;
  padding: .3em 1.2em .3em .3em;
  position: relative;
}

#extension-search-simple {
  float: left;
}
#extensionSearchInput {
  background: url("$xwiki.getSkinFile('icons/xwiki/search.png')") no-repeat scroll left center $theme.pageContentBackgroundColor;
  padding-left: 18px;
  width: 340px;
}

#extensionSearchRepositoryList {
  padding: 3px;
}

#extension-search-advanced {
  float: right;
  margin: 8px 0 0;
}

#extension-search-advanced legend {
  font-size: .875em;
  margin: 0;
  border: 0 none;
  text-align: right;
}

#extension-search-advanced legend a:after {
  content: " \bb";
}
#extension-search-advanced legend a.expanded:after {
  color: transparent;
}
#extension-search-advanced-body {
  display: none;
}
#extension-search-advanced-body:target ~ div.hidden {
  display: block;
}
.extension-search-advanced-popup {
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.25);
  padding: .3em .5em;
  position: absolute;
  right: 1.2em;
  text-align: left;
  width: 40%;
  z-index: 200;
}
/****************************** &lt;Inner Menu&gt; *************************/

.innerMenu {
  color: $theme.textSecondaryColor;
  font-size: 1em;
  font-size: 0.8em;
  /*padding: 0 1.55em .1em 3.35em;*/
  padding: 0 0 .1em;
  margin: 0 0 0 0 !important;
  margin-top: -5px !important;
}

.innerMenu li {
  display: inline-block;
  sborder: 1px solid red;
  vertical-align: top;
  margin-left: -1px;
}
.innerMenu li a {
  border-radius: 5px 5px 0 0 / 3px 3px 0 0;
  border-top: 3px solid $theme.borderColor;
  display: inline-block;
  margin: 2px 2em 0 0;
  padding: 6px .5em .2em;
  position: relative;
  top: 0px;
}
.innerMenu li a:hover {
  border-radius: 5px 5px 0 0;
  border-top: 5px solid $theme.borderColor;
  margin-top: 0px;
}

.innerMenu li a.current {
  background-color: $theme.panelCollapsedBackgroundColor;
  border: 0 none;
  border-top: 5px solid $theme.panelCollapsedBackgroundColor;
  margin-top: 0;
  border-radius: 0 0 5px 5px;
  box-shadow: 3px;
}

.innerMenu li a.current:after {
  border-style: solid;
  border-color: transparent transparent  $theme.borderColor;
  border-width: 0 5px 5px 0;
  width: 0;
  display: block;
  position: absolute;
  height: 0;
  content: "";
  top: -5px;
  right: -5px;
}

.innerMenu li a.current {
  color: $theme.panelCollapsedTextColor;
  text-decoration: none;
}

/****************************** &lt;/ Clean&gt; *************************/

.ui-progress-bar {
  background-image:-moz-repeating-linear-gradient(-45deg, rgba(255, 255, 255, 0.2) 0, rgba(255, 255, 255, 0.2) 5px, transparent 5px, transparent 10px);
  background-repeat: repeat;
  background-color: $theme.notificationSuccessColor !important;
  background-position: left;
  -moz-animation-duration: 0.2s;
  -moz-animation-iteration-count: infinite;
  -moz-animation-name: progress-animation;
  -moz-animation-timing-function: linear;
}

@-moz-keyframes progress-animation {
  0% {background-position: -14.142px 0;}
  100% {background-position: 0px 0;}
}

.ui-progress-background {
  background-color: transparent;
  border-radius: 8px 8px 8px 8px;
  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.3) inset, 0 1px 0 0 $theme.pageContentBackgroundColor;
  height: 8px;
}

.ui-progress-bar {
  background-color: $theme.backgroundSecondaryColor;
  border-radius: 8px 8px 8px 8px;
  height: 8px;
}

.ui-progress-bar.green {

  -webkit-box-shadow:
    inset 0 2px 9px  rgba(255,255,255,0.3),
    inset 0 -2px 6px rgba(0,0,0,0.4);
  -moz-box-shadow:
    inset 0 2px 9px  rgba(255,255,255,0.3),
    inset 0 -2px 6px rgba(0,0,0,0.4);
  box-shadow:
    inset 0 2px 9px  rgba(255,255,255,0.3),
    inset 0 -2px 6px rgba(0,0,0,0.4);

  background-image:
     -webkit-gradient(linear, 0 0, 100% 100%,
        color-stop(.25, rgba(255, 255, 255, .2)),
        color-stop(.25, transparent), color-stop(.5, transparent),
        color-stop(.5, rgba(255, 255, 255, .2)),
        color-stop(.75, rgba(255, 255, 255, .2)),
        color-stop(.75, transparent), to(transparent)
     );

  -webkit-background-size: 50px 50px;
  -moz-background-size: 50px 50px;
}

.ui-progress-bar.orange {
  /*other*/ background: -moz-repeating-linear-gradient(left top -30deg, rgba(255, 255, 255, 0.17), rgba(255, 255, 255, 0.17) 15px, rgba(255, 255, 255, 0) 15px, rgba(255, 255, 255, 0) 30px) repeat scroll 0 0%, -moz-linear-gradient(center top , #F1A165, #D09000) repeat scroll 0 0 transparent;
}

.ui-progress-bar.red {
  /*other*/ background: -moz-repeating-linear-gradient(left top -30deg, rgba(255, 255, 255, 0.17), rgba(255, 255, 255, 0.17) 15px, rgba(255, 255, 255, 0) 15px, rgba(255, 255, 255, 0) 30px) repeat scroll 0 0%, -moz-linear-gradient(center top , #F0A3A3, #F42323) repeat scroll 0 0 transparent;
}

.ui-progress-message {
  color: $theme.textSecondaryColor;
  font-size: .85em;
  min-width: 100px;
}

/****************************** &lt;/ Progress &gt; *************************/

/***************** Selection Menus **************/

.selection {
  display: inline-block;
  float: left;
  font-size: 1.05em;
  position: relative;
}

.selection .menuarrow {
    color: $theme.textSecondaryColor;
    font-size: 0.6em;
    font-weight: bold;
    margin: 0;
    padding-left: 2px;
    padding-right: 3px;
    position: relative;
    top: -3px;
}
.selection .menuarrow .tooltipHint {
    color: $theme.textSecondaryColor;
}
.selection .rightmenu {
    display: block;
    padding: 0;
    position: relative;
}
.selection .submenu {
    -moz-box-shadow: 1px 1px 1px rgba(80, 80, 80, 0.8);
    background: none repeat scroll 0 0 $theme.panelCollapsedBackgroundColor;
    border: 1px solid $theme.borderColor;
    display: block;
    margin-left: 16px;
    margin-top: 3px;
    padding: 2px;
    position: absolute;
    width: 120px;
    z-index: 998;
}
.rightmenu .icon img:hover, .tools .tool img:hover {
    background-color: $theme.panelCollapsedBackgroundColor;
}

.selection .submenuitem {
    cursor: pointer;
    display: block;
    padding-left: 20px;
}

.selection .rightmenu .topmenuentry {
  display: inline-block;
  float: none;
  margin: 0;
}

.changedRight {
    background: url("$xwiki.getSkinFile('icons/silk/bullet_black.png')") no-repeat scroll 0 center transparent;
    font-weight: bold;
}

.selection .topmenuentry {
  min-height: 1em;
}

.extHeaderRight .selection .submenu, .extHeaderLeft .selection .submenu  {
  margin-left: 10px;
  width: 100px;
}

.extHeaderLeft .selection .submenu  {
  margin-left: 6px;
}

/***********************   Extension Manager ****************/

.extHeader {
  /*background: -moz-linear-gradient(270deg, #FFFFFF, #EFEFEF) repeat scroll 0 0 #EFEFEF;*/
  background-color: $theme.panelCollapsedBackgroundColor;
  border: 1px solid $theme.borderColor;
  color: $theme.panelCollapsedTextColor;
  padding: 3px 1.2em 3px 0.7em;
  font-size: .8em;
}

.extHeader:first-of-type {
  border-bottom: 0;
}

.extHeaderLeft {
  float: left;
  width: 50%;
}
.extHeaderLeft .xform label {
  display: block;
  font-weight: bold;
}
.extHeaderLeft .xform .globalsearch {
  text-align: left;
}

.extHeaderBottom  .extHeaderLeft{
  padding-left: 2.5em;
  margin-top: 3px;
}

.extHeaderRight {
  float: right;
  cursor: pointer;
  margin: 3px 0 -3px;
  position: relative;
  width: 40%;
}

.extHeaderBottom  .extHeaderRight {
  margin: 0 0.4em;
}

.type{
  display: inline-block;
  height: 16px;
  text-indent: -9999px;
  width: 16px;
}

.type {
  background: url("$xwiki.getSkinFile('icons/silk/bricks.png')") no-repeat scroll 0 0 transparent;
}

.extFilter {
  color: $theme.textColor;
  padding: 0 4px;
  cursor: pointer;
}

.extHeaderLeftSearch {
  float: left;
  margin-left: .2em;
}

.extHeaderLeftInput {
  font-size: 1.1em;
  padding: 0 .5em;
  min-width: 340px;
}

.extMiniName {

}

.extMeta {
  padding: 1.3em 1.5em 0 0;
  position: absolute;
  right: 0;
  top: 0;
  font-size: .8em;
  color: $theme.textSecondaryColor;
  text-align: right;
}

.extMiniMeta {

}

.extButtons {
  padding: 0 1.55em 1.6em 0;
  position: absolute;
  right: 0;
  bottom: 0;
  font-size: .8em;
  color: $theme.textSecondaryColor;
}

.extButtons .button {
  min-width: 5em;
  text-align: center;
}

.progressButtons {
  padding-bottom: 2.4em;
}

.extUpdateTitle {
  margin-right: .5em;
}

.secondary {
  color: $theme.textSecondaryColor;
  font-size: .9em;
}

.extItem.statusInstalled, .extItem.statusUpgradable, .extItem.statusIncompatible, .extItem.statusDisable {
  border-right: 7px solid transparent;
}

.extItem.statusInstalled .extButtons, .extItem.statusUpgradable .extButtons, .extItem.statusIncompatible .extButtons, .extItem.statusDisable .extButtons{
  padding: 0 1em 1.6em 0;
}

.typeApp{
  background-image: url("$xwiki.getSkinFile('icons/silk/application.png')");
}

.typeModule{
  background-image: url("$xwiki.getSkinFile('icons/silk/connect.png')");
}

.typeSkin{
  background-image: url("$xwiki.getSkinFile('icons/silk/layout_content.png')");
}

.typeMacro{
  background-image: url("$xwiki.getSkinFile('icons/silk/cog.png')");
}

.typePlugin{
  background-image: url("$xwiki.getSkinFile('icons/silk/plugin.png')");
}

.extItem.statusInstalled  {
  border-right-color: $theme.notificationSuccessColor;
}

.statusInstalled  .extStatus, .extItem .statusInstalled  .extMiniStatus{
  color: $theme.notificationSuccessColor;
}

.extItem.statusUpgradable  {
  border-right-color: $theme.notificationWarningColor;
}

.statusUpgradable  .extStatus, .extItem .statusUpgradable .extMiniStatus{
  color: $theme.notificationWarningColor;
}

.extItem.statusIncompatible  {
  border-right-color: $theme.notificationErrorColor;
}

.statusIncompatible  .extStatus, .extItem .statusIncompatible  .extMiniStatus{
  color: $theme.notificationErrorColor;
}

.extItem.statusDisable  {
  border-right-color: $theme.backgroundSecondaryColor;
}

.extItem.statusDisable  .extItemHeader{
  background-image: -moz-linear-gradient(center top , $theme.backgroundSecondaryColor , $theme.pageContentBackgroundColor);
}

.statusDisable  .extStatus, .statusDisable  .extDescription, .statusDisable  .extName, .statusDisable  .extAuthor a{
  color: $theme.textSecondaryColor;
}

.expandTool {
  border-style: solid;
  position: absolute;
  right: 5px;
  top: 5px;
  width: 5px;
  z-index: 2;
}

.expandedExt .expandTool{
  border-color: transparent $theme.borderColor transparent transparent;
  border-width: 0 7px 7px 0;
  float: right;
}

.collapsedExt:hover  .expandTool {
  border-color: transparent transparent $theme.panelHeaderBackgroundColor transparent;
  border-width: 0 7px 7px 0;
  display: block; /* Content is hidden but keep at least the activator */
  float: right;
  width: 0;
}

.collapsedExt  .extItemContent {
  display: none; /* Hide inside content when collapsed */
}

.extItemHeader {
  padding: 0.8em 1em 1em 2.7em;
  position: relative;
}

.extItemContent h6 {
  border: 0 none;
  font-size: 1em;
  margin: 1.5em 0 0;
}

.dependencies {
  border-top: 1px dotted $theme.borderColor;
}

.dependencies .extItem {
  padding: 0.3em 0;
  border-style: solid solid dotted;
  border-width: 0 7px 1px 0;
  border-bottom-color: $theme.borderColor;
  box-shadow: none;
}

.dependencies .extItem:hover {
  background-color: $theme.highlightColor;
}

.dependencies .extMeta {
  padding-top: .8em;
}

.zone {
  display: none;
}

.zone.current {
  display: block;
}

#extensions .releasenotesZone ul, #extensions .descriptionZone ul  {
  float: none;
  list-style-type: circle;
  margin-left: 1.3em;
}

.extHeaderBottom .xwiki-livetable-pagination {
  font-size: 1.1em;
  line-height: 1.8em;
  padding-left: 0.5em;
}

.extHeaderBottom .pagination {
  line-height: 1.8em; 
  margin: 0;
}

.pagenumber.selected {
  font-weight: 700;
}

.extHeaderBottom .pagesizeselect {
  font-size: .9em;
}

.leftmetadata {
  float: left;
}

.rightmetadata {
  float: right;
}

/*********** Pagination *********/
#xwikicontent .controlPagination {
  height: 15px;
  line-height: 1.6em !important;
  margin: 0.35em 0 0 1em !important;
  vertical-align: bottom;
  width: 27px;
}
#xwikicontent .controlPagination .prevPagination, #xwikicontent .controlPagination .noPrevPagination, #xwikicontent .controlPagination .nextPagination, #xwikicontent .controlPagination .noNextPagination {
  height: 13px;
  width: 13px;
}

#xwikicontent .controlPagination .prevPagination, #xwikicontent .controlPagination .noPrevPagination {
  background-image: url("/xwiki/bin/download/Improvements/ExtensionManagerProposal1/arrowleft.gif");
  background-position: left top;
}
#xwikicontent .controlPagination .nextPagination, #xwikicontent .controlPagination .noNextPagination {
  background-image: url("/xwiki/bin/download/Improvements/ExtensionManagerProposal1/arrowright.gif");
  background-position: right top;
  left: 14px;
}

/*********** /Pagination *********/

/*********** Repositories *********/
ul.repositories {
  background-color: #F7F7F7;
  font-size: .9em;
  list-style-type: none;
  margin: 0;
  padding: 0.5em;
}

ul.repositories li {
  padding: 2px;
  position: relative;
}

ul.repositories span {
  display: block;
}

ul.repositories .tools {
  display: none;
  position: absolute;
  right: 3px;
  top: 3px;
}
ul.repositories li:hover .tools {
  display: block;
}

ul.repositories  li:hover{
  background-color: $theme.highlightColor;
}

.tools a {
  background: none no-repeat scroll 94% 50% transparent;
  display: inline-block;
  float: left;
  padding: 0;
  text-indent: -9999px;
  width: 16px;
}

.tools .delete {
  background-image: url("/xwiki/bin/download/Improvements/ExtensionManagerProposal1/bulletcross.png");
}

.tools .edit {
  background-image: url("/xwiki/bin/download/Improvements/ExtensionManagerProposal1/bulletedit.png");
  background-position: 0 -2px;
}    

.addRepository {
  margin-top: .3em;
}

.addRepository input[type="text"]{
  color: $theme.textSecondaryColor;
  font-size: .95em;
}

.addRepository .icon {
  margin: -3px 0 0 -23px;
}

ul.repositories .addRepository:hover  {
  background-color: transparent;
}

/*********** /Repositories *********/</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <content>{{velocity output="false"}}
$xwiki.ssx.use('ExtensionManagerMacros')
$xwiki.jsx.use('ExtensionManagerMacros')

#set ($extensionManager = $services.extension)

#if ($request.extensionWiki &amp;&amp; $request.extensionWiki.trim() != '')
  #set($extensionWiki = $request.extensionWiki)
#else
  #if (!$xcontext.isMainWiki())
    #set($extensionWiki = $xcontext.database)
  #end
#end

#if ($extensionWiki)
  #set($extensionNamespace = "wiki:${extensionWiki}")
#end

#macro (displayExtensionSearchBar)
  (% class="extension-search-bar" %)(((
    {{html clean="false"}}
    ## Simple search form.
    &lt;form action="" id="extension-search-simple"&gt;
      &lt;div&gt;
        #if ($request.section)
          &lt;input type="hidden" name="section" value="$escapetool.xml($request.section)" /&gt;
        #end
        &lt;label class="hidden" for="extensionSearchInput"&gt;$msg.get('extensions.search.tip')&lt;/label&gt;
        &lt;input type="text" #if ("$!request.search" == '')class="withTip" #{end}id="extensionSearchInput" name="search" value="#if ("$!request.search" != '')$escapetool.xml($request.search)#{else}$msg.get('extensions.search.tip')#{end}" /&gt;
        &lt;label class="hidden" for="extensionSearchRepositoryList"&gt;$msg.get('extensions.search.repository.label')&lt;/label&gt;
        &lt;select id="extensionSearchRepositoryList" name="repo"&gt;
          &lt;option value=""&gt;$msg.get('extensions.search.repository.all.label')&lt;/option&gt;
          #if ($request.repo)
            #set ($selectedRepositoryId = $request.repo)
          #end
          #foreach ($repositoryId in ['core', 'installed', 'local'])
            &lt;option value="$repositoryId"#if ($selectedRepositoryId == $repositoryId) selected="selected"#end&gt;$msg.get("extensions.search.repository.${repositoryId}.label")&lt;/option&gt;
          #end
        &lt;/select&gt;
      &lt;/div&gt;
    &lt;/form&gt;
    ## Advanced search form.
    &lt;form action="" class="xform"&gt;
      &lt;fieldset id="extension-search-advanced"&gt;
        &lt;div id="extension-search-advanced-body"&gt;&lt;/div&gt;
        &lt;legend&gt;&lt;a href="#extension-search-advanced-body"&gt;$msg.get('extensions.advancedSearch.title')&lt;/a&gt;&lt;/legend&gt;
        &lt;div class="plainmessage extension-search-advanced-popup hidden"&gt;
          #if ($request.section)
            &lt;input type="hidden" name="section" value="$escapetool.xml($request.section)" /&gt;
          #end
          &lt;dl&gt;
            &lt;dt&gt;&lt;label for="advancedExtensionSearch-id"&gt;$msg.get('extensions.advancedSearch.id.label')&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input type="text" name="extensionId" id="advancedExtensionSearch-id" value="" /&gt;&lt;/dd&gt;
            &lt;dt&gt;&lt;label for="advancedExtensionSearch-version"&gt;$msg.get('extensions.advancedSearch.version.label')&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input type="text" name="extensionVersion" id="advancedExtensionSearch-version" value="" /&gt;&lt;/dd&gt;
            #if ($xcontext.isMainWiki() &amp;&amp; $xwiki.isVirtualMode())
              &lt;dt&gt;&lt;label for="advancedExtensionSearch-wiki"&gt;$msg.get('extensions.advancedSearch.wiki.label')&lt;/label&gt;&lt;/dt&gt;
              &lt;dd&gt;&lt;input type="text" name="extensionWiki" id="advancedExtensionSearch-wiki" value="" /&gt;&lt;/dd&gt;
            #end
          &lt;/dl&gt;
          &lt;p&gt;
            &lt;span class="buttonwrapper"&gt;
              &lt;input type="submit" value="$msg.get('extensions.advancedSearch.actions.submit')" class="button" /&gt;
            &lt;/span&gt;
            &lt;span class="buttonwrapper"&gt;
              &lt;a href="#extension-search-simple" class="actioncancel secondary button"&gt;$msg.get('extensions.advancedSearch.actions.cancel')&lt;/a&gt;
            &lt;/span&gt;
          &lt;/p&gt;
        &lt;/div&gt;
      &lt;/fieldset&gt;
    &lt;/form&gt;
    {{/html}}
    (% class="clearfloats" %)((()))
  )))
#end

#macro (displayExtensionName $extension $actions)
  #set ($name = "$!{extension.name}")
  #if ($name == '')
    #set ($name = "$!{extension.id.id}")
    #if ($name.indexOf(':') &gt;= 0)
      #set ($name = $name.substring($mathtool.add($name.indexOf(':'), 1)))
    #end
  #end
  ${name}##
#end

#macro (displayExtensionActionButtons $extension)
  {{html}}
  &lt;form action=""&gt;
    &lt;div class="extension-actions"&gt;
      &lt;input type="hidden" name="extensionId" value="$extension.id.id" /&gt;
      &lt;input type="hidden" name="extensionVersion" value="$extension.id.version" /&gt;
      #if ($extensionWiki)
        &lt;input type="hidden" name="extensionWiki" value="$extensionWiki" /&gt;
      #end
      #if ($request.section)
        &lt;input type="hidden" name="section" value="$escapetool.xml($request.section)" /&gt;
      #end
      ##
      ## Generic actions.
      ##
      #computeXBack()
      ## Check if the current request targets the given extension.
      #if ($request.extensionId == $extension.id.id &amp;&amp; $request.extensionVersion == $extension.id.version.value)
        #if ($xcontext.action == 'get')
          ## AJAX request to show extension details.
          &lt;span class="buttonwrapper"&gt;
            &lt;input type="submit" name="showdetails" value="$msg.get('extensions.actions.showDetails')" class="button visibilityAction" /&gt;
          &lt;/span&gt;
          &lt;span class="buttonwrapper"&gt;
            &lt;input type="submit" name="hidedetails" value="$msg.get('extensions.actions.hideDetails')" class="button visibilityAction" /&gt;
          &lt;/span&gt;
        #else
          ## The given extension is displayed alone.
          &lt;span class="buttonwrapper"&gt;
            &lt;a href="${xback}" class="button"&gt;$msg.get('extensions.actions.back')&lt;/a&gt;
          &lt;/span&gt;
        #end
      #else
        ## The given extension is displayed in a list of extensions.
        &lt;span class="buttonwrapper"&gt;
          &lt;input type="submit" name="actionshowdetails" value="$msg.get('extensions.actions.showDetails')" class="button" /&gt;
        &lt;/span&gt;
        &lt;input type="hidden" name="xback" value="${xback}" /&gt;
      #end
      ##
      ## Specific actions.
      ##
      #if ($hasProgramming)
        #if(!$extensionStatus)
          #determineExtensionStatus($extension $extensionStatus $extensionStatusMessage)
        #end
        #if ($extensionStatus == 'installed' &amp;&amp; ($xcontext.isMainWiki() || !$extension.isInstalled(null)))
          ## This extension can be uninstalled.
          &lt;span class="buttonwrapper"&gt;
            &lt;input type="submit" name="actionuninstall" value="$msg.get('extensions.actions.uninstall')" class="button secondary" /&gt;
          &lt;/span&gt;
        #elseif ($extensionStatus == 'remote' || $extensionStatus == 'remote-installed')
          ## Installable extension.
          &lt;span class="buttonwrapper"&gt;
            &lt;input type="submit" name="actioninstall" value="$msg.get('extensions.actions.install')" class="button" /&gt;
          &lt;/span&gt;
        #end
      #end
    &lt;/div&gt;
  &lt;/form&gt;
  {{/html}}
#end

#macro (displayExtensionAuthors $extension)
  (% class="extension-authors" %)(((
    $msg.get('extensions.info.authors') ##
    #foreach ($author in $extension.authors)
      #if ($author.name == 'devs')
        [[$msg.get('extensions.info.authors.xwikiorg')&gt;&gt;http://www.xwiki.org/]]##
      #elseif ("$!author.url" != '' &amp;&amp; "$!author.name" != '')
        [[${author.name}&gt;&gt;${author.url}]]##
      #else
        ${author.name}##
      #end
      #if ($foreach.hasNext), ##
      #else )))

      #end
    #end
#end

#macro (displayExtensionDetails_menuLink $detail $selected)
  [[$msg.get("extensions.info.category.$detail")&gt;&gt;||anchor="extension-body-${detail}-${extension.id.id}-${extension.id.version}"#if ($selected) class="current"#end]]
#end

#macro (displayExtensionDetails_menu $extension)
  (% class="innerMenu" %)
  * #displayExtensionDetails_menuLink('description')
  #if ("$!{extension.releaseNotes}" != '')
    * #displayExtensionDetails_menuLink('releaseNotes')
  #end
  #if ($extension.dependencies.size() &gt; 0 || $backwardDependencies.size() &gt; 0)
    * #displayExtensionDetails_menuLink('dependencies')
  #end
  ## Display the progress tab if the install/uninstall plan is requested or if there is 
  ## a previously stored job status for this extension (a previous install or uninstall).
  #set ($planRequested = $request.actioninstall || $request.actionuninstall)
  #if ($planRequested || $extensionManager.getExtensionJobStatus($extension.id.id))
    * #displayExtensionDetails_menuLink('progress' $planRequested)
  #end
#end

#macro (displayExtensionDetails_description $extension)
  {{id name="extension-body-description-${extension.id.id}-${extension.id.version}" /}}
  (% class="extension-body-description extension-body-section" %)(((
    (% class="extension-metadata" %)
    * $msg.get('extensions.info.license', [$extension.licenses.size()]) ##
    #foreach ($license in $extension.licenses)
      ${license.name}##
      #if ($foreach.hasNext), #end
    #end

    #if ($extension.repository.id.URI &amp;&amp; $extension.repository.id.URI.scheme != 'file')
      * $msg.get('extensions.info.repository') [[$extension.repository.id.id&gt;&gt;$extension.repository.id.URI]]
    #end
    #if ($extension.dependency)
      * $msg.get('extensions.info.dependency')
    #end
    #if ("$!{extension.webSite}" != '')
      * $msg.get('extensions.info.website') [[$extension.webSite.replaceAll('^[^/]++//([^/]++)/?.*+$', '$1')&gt;&gt;$extension.webSite]]
    #end
    #if ($extension.features.size() &gt; 0)
      * $msg.get('extensions.info.features') $extension.features
    #end
    #if ($xwiki.virtualMode)
      #if (!$extension.namespaces || $extension.namespaces.size() == 0)
        * $msg.get('extensions.info.namespaces.global')
      #else
        * $msg.get('extensions.info.namespaces.list') #foreach ($namespace in $extension.namespaces)$namespace#if($foreach.hasNext), #end#end

      #end
    #end
    ##
    ## TODO: need a decision on what exactly is the description and how it should be safely displayed (wiki syntax, server side generated HTML, etc)
    ## $!extension.description
  )))
#end

#macro (displayExtensionDetails_releaseNotes $extension)
  #if ("$!{extension.releaseNotes}" != '')

    {{id name="extension-body-releaseNotes-${extension.id.id}-${extension.id.version}"/}}
    (% class="extension-body-releaseNotes extension-body-section" %)(((
      $!{extension.releaseNotes}
    )))
  #end
#end

#macro (displayDependency $dependencyOrExtension $namespace)
  #if ($dependencyOrExtension.versionConstraint)
    ## Dependency object.
    #set ($dependencyId = $dependencyOrExtension.id)
    #set ($dependencyVersion = $dependencyOrExtension.versionConstraint)
    #set ($dependencyExtension = $extensionManager.resolve($dependencyOrExtension))
  #else
    ## Extension object.
    #set ($dependencyId = $dependencyOrExtension.id.id)
    #set ($dependencyVersion = $dependencyOrExtension.id.version.value)
    #set ($dependencyExtension = $dependencyOrExtension)
  #end
  #set ($dependencyStatus = 'unknown')
  #set ($dependencyStatusMessage = $NULL)
  #set ($dependencyName = $dependencyId)
  #if ($dependencyExtension)
    #determineExtensionStatus($dependencyExtension $dependencyStatus $dependencyStatusMessage)
    #set ($dependencyURL = "#getExtensionURL($dependencyId $dependencyVersion)")
    #set ($dependencyName = "[[#displayExtensionName($dependencyExtension)&gt;&gt;path:$dependencyURL]]")
  #end
  (% class="dependency-item extension-item-$dependencyStatus" %)(((
    ${dependencyName}(% class="extension-version" %)$!{dependencyVersion}##
    #if ("$!namespace" != '')
      (% class="extension-namespace" %)$msg.get('extensions.info.dependency.wiki', [$namespace])##
    #end
    (% class="extension-status" %)$!dependencyStatusMessage
  )))
#end

#macro (displayExtensionDetails_dependencies_upstream $extension)
  $msg.get('extensions.info.dependencies.directDependencies', [$extension.dependencies.size()])
  #foreach ($dependency in $extension.dependencies)
    * #displayDependency($dependency)
    #if (!$foreach.hasNext)

    #end
  #end
#end

#macro (displayExtensionDetails_dependencies_downstream $backwardDependencies)
  $msg.get('extensions.info.dependencies.backwardDependencies', [$backwardDependencies.size()])
  #foreach ($namespace in $backwardDependencies.entrySet())
    #foreach ($dependency in $namespace.value)
      * #displayDependency($dependency $namespace.key)
    #end
  #end
#end

#macro (displayExtensionDetails_dependencies $extension $backwardDependencies)
  #if ($extension.dependencies.size() &gt; 0 || $backwardDependencies.size() &gt; 0)

    {{id name="extension-body-dependencies-${extension.id.id}-${extension.id.version}" /}}
    #computeXBack()
    (% class="extension-body-dependencies extension-body-section" %)(((
      #displayExtensionDetails_dependencies_upstream($extension)
      #displayExtensionDetails_dependencies_downstream($backwardDependencies)
    )))
  #end
#end

#macro (displayExtensionDetails_progress $extension)
  #set ($jobStatus = $extensionManager.getExtensionJobStatus($extension.id.id))
  #if ($jobStatus || $request.actioninstall || $request.actionuninstall)

    {{id name="extension-body-progress-${extension.id.id}-${extension.id.version}" /}}
    (% class="extension-body-progress extension-body-section" %)(((
      #if ($request.actioninstall)
        #computeInstallPlan($extension.id.id $extension.id.version.value $extensionNamespace)
      #elseif ($request.actionuninstall)
        #computeUninstallPlan($extension.id.id $extension.id.version.value $extensionNamespace)
      #else
        #printStatusLog($jobStatus)
      #end
    )))
  #end
#end

#macro (displayExtensionDetails $extension)
  #set ($backwardDependencies = $extensionManager.getBackwardDependencies($extension.id.id, $extension.id.version.value))
  #if (!$backwardDependencies)
    #set ($backwardDependencies = {})
  #end
  (% class="extension-body" %)(((
    #displayExtensionDetails_menu($extension)

    #displayExtensionDetails_description($extension)
    #displayExtensionDetails_releaseNotes($extension)
    #displayExtensionDetails_dependencies($extension $backwardDependencies)
    #displayExtensionDetails_progress($extension)
  )))
#end

#macro (displayExtension $extension)
  #determineExtensionStatus($extension $extensionStatus $extensionStatusMessage)
  (% class="extension-item extension-item-${extensionStatus}" %)(((
    (% class="extension-header" %)(((
      (% class="extension-name" %)
      == #displayExtensionName($extension) (% class="extension-version %)$extension.id.version ==

      (% class="extension-header-right" %)(((
        #if ($extensionStatusMessage)
          (% class="extension-status" %)
          $extensionStatusMessage

        #end
        #displayExtensionActionButtons($extension)
      )))

      #if ($extension.authors.size() &gt; 0)
        #displayExtensionAuthors($extension)
      #end
      #if ("$!{extension.summary}" != '')
        (% class="extension-description" %)
        {{{
          $extension.summary.replaceAll('\s+', ' ')
        }}}

      #end
      (% class="clearfloats" %)((()))
    )))
    #if ($request.extensionId == $extension.id.id &amp;&amp; $request.extensionVersion == $extension.id.version.value)
      #displayExtensionDetails($extension)
    #end
  )))
#end

#macro (installExtension $extensionId $extensionVersion $extensionNamespace)
  #set ($discard = $extensionManager.install($extensionId, $extensionVersion, $extensionNamespace))
  #set ($lastError = $extensionManager.lastError)
  #if ($lastError)
    #if ($extensionWiki)
      #set ($errorMessage = $msg.get('extensions.install.error.installFailure.onWiki', [$extensionId, $extensionVersion, $extensionWiki]))
    #else
      #set ($errorMessage = $msg.get('extensions.install.error.installFailure', [$extensionId, $extensionVersion]))
    #end
    #if ($xcontext.action == 'get')
      ## AJAX request. Send error back.
      $response.sendError(400, $errorMessage)
    #else
      {{error}}$errorMessage #printThrowable($lastError){{/error}}
    #end
  #else
    ## Redirect to extension display.
    $response.sendRedirect("#getExtensionURL()")
  #end
#end

#macro (computeInstallPlan $extensionId $extensionVersion $extensionNamespace)
  #set($installPlan = $extensionManager.createInstallPlan($extensionId, $extensionVersion, $extensionNamespace))
  #if (!$installPlan)
    {{error}}$msg.get('extensions.install.error.prepareFailure', [$extensionId, $extensionVersion, $extensionManager.lastError.message]){{/error}}
  #else
    #set($hasError = false)
    #foreach($log in $installPlan.log)
      #if ($log.level.name() == 'ERROR')
        #set($hasError = true)
      #end
    #end
    ##
    #if ($hasError)
      #printStatusLog($installPlan)
    #else
      #set($extensionsToInstall = [])
      #set($extensionsToUpgrade = [])
      ##
      #foreach($planAction in $installPlan.actions)
        #if ($planAction.action.name() == "INSTALL")
          #set($void = $extensionsToInstall.add($planAction))
        #elseif ($planAction.action.name() == "UPGRADE")
          #set($void = $extensionsToUpgrade.add($planAction))
        #end
      #end
      ##
      #if ($extensionsToInstall.isEmpty() &amp;&amp; $extensionsToUpgrade.isEmpty())
        {{info}}$msg.get('extensions.install.error.alreadyInstalled'){{/info}}
      #else
        #if (!$extensionsToInstall.isEmpty())
          $msg.get('extensions.install.list.new')
          #foreach ($planAction in $extensionsToInstall)
            * #displayDependency($planAction.extension $planAction.namespace)
          #end

        #end
        #if (!$extensionsToUpgrade.isEmpty())
          $msg.get('extensions.install.list.upgrade')
          #foreach ($planAction in $extensionsToUpgrade)
            * #displayDependency($planAction.extension $planAction.namespace)
          #end

        #end
        {{html}}
          &lt;form action="" class="xform"&gt;
            &lt;div&gt;
              &lt;input name="form_token" value="$!services.csrf.getToken()" type="hidden" /&gt;
              &lt;input name="extensionId" value="${escapetool.xml($extensionId)}" type="hidden" /&gt;
              &lt;input name="extensionVersion" value="${escapetool.xml($extensionVersion)}" type="hidden" /&gt;
              #if ($extensionWiki)
                &lt;input name="extensionWiki" value="$extensionWiki" type="hidden" /&gt;
              #end
              #if ($request.section)
                &lt;input type="hidden" name="section" value="$escapetool.xml($request.section)" /&gt;
              #end
              &lt;input name="actioninstall" type="hidden" /&gt;
              &lt;p&gt;
                &lt;span class="buttonwrapper"&gt;&lt;input type="submit" value="$msg.get('extensions.install.actions.submit')" name="confirm" class="button"/&gt;&lt;/span&gt;
                #if ("$!{request.xback}" != '')
                  &lt;span class="buttonwrapper"&gt;&lt;a href="${request.xback}" class="secondary button"&gt;$msg.get('extensions.install.actions.cancel')&lt;/a&gt;&lt;/span&gt;
                #end
              &lt;/p&gt;
            &lt;/div&gt;
          &lt;/form&gt;
        {{/html}}
      #end
    #end
  #end
#end

#macro (uninstallExtension $extensionId $extensionVersion $extensionNamespace)
  #set($discard = $extensionManager.uninstall($extensionId, $extensionNamespace))
  #set($lastError = $extensionManager.lastError)
  #if ($lastError)
    #set ($errorMessage = $msg.get('extensions.uninstall.error.uninstallFailure', [$extensionId, $extensionVersion]))
    #if ($xcontext.action == 'get')
      ## AJAX request. Send error back.
      $response.sendError(400, $errorMessage)
    #else
      {{error}}$errorMessage #printThrowable($lastError){{/error}}
    #end
  #else
    ## Redirect to extension display.
    $response.sendRedirect("#getExtensionURL()")
  #end
#end

#macro (computeUninstallPlan $extensionId $extensionVersion $extensionNamespace)
  #set($uninstallPlan = $extensionManager.createUninstallPlan($extensionId, $extensionNamespace))
  #if (!$uninstallPlan)
    {{error}}$msg.get('extensions.uninstall.error.prepareFailure', [$extensionId, $extensionVersion, $lasterror.message]){{/error}}
  #else
    #set($hasError = false)
    #foreach($log in $uninstallPlan.log)
      #if ($log.level.name() == 'ERROR')
        #set($hasError = true)
      #end
    #end
    ##
    #if ($hasError)
      #printStatusLog($uninstallPlan)
    #else
      #set($extensionsToUninstall = [])
      ##
      #foreach($planAction in $uninstallPlan.actions)
        #if ($planAction.action.name() == "UNINSTALL")
          #set($void = $extensionsToUninstall.add($planAction))
        #end
      #end
      ##
      #if ($extensionsToUninstall.isEmpty())
        {{info}}$msg.get('extensions.uninstall.error.notInstalled'){{/info}}
      #else
        The following extensions will be removed:
        #foreach ($planAction in $extensionsToUninstall)
          * #displayDependency($planAction.extension $planAction.namespace)
        #end

        {{html}}
          &lt;form action="" class="xform"&gt;
            &lt;div&gt;
              &lt;input name="form_token" value="$!services.csrf.getToken()" type="hidden" /&gt;
              &lt;input name="extensionId" value="${escapetool.xml($extensionId)}" type="hidden" /&gt;
              &lt;input name="extensionVersion" value="${escapetool.xml($extensionVersion)}" type="hidden" /&gt;
              #if ($extensionWiki)
                &lt;input name="extensionWiki" value="${extensionWiki}" type="hidden" /&gt;
              #end
              #if ($request.section)
                &lt;input type="hidden" name="section" value="$escapetool.xml($request.section)" /&gt;
              #end
              &lt;input name="actionuninstall" type="hidden" /&gt;
              &lt;p&gt;
                &lt;span class="buttonwrapper"&gt;&lt;input type="submit" value="$msg.get('extensions.uninstall.actions.submit')" name="confirm" class="button"/&gt;&lt;/span&gt;
                #if ("$!{request.xback}" != '')
                  &lt;span class="buttonwrapper"&gt;&lt;a href="${request.xback}" class="secondary button"&gt;$msg.get('extensions.uninstall.actions.cancel')&lt;/a&gt;&lt;/span&gt;
                #end
              &lt;/p&gt;
            &lt;/div&gt;
          &lt;/form&gt;
        {{/html}}
      #end
    #end
  #end
#end

#macro (getExtensionURL $extensionId $extensionVersion)
  #set ($parameters = {})
  #if ($extensionId)
    #set ($discard = $parameters.put('extensionId', $extensionId))
  #elseif ($request.extensionId)
    #set ($discard = $parameters.put('extensionId', $request.extensionId))
  #end
  #if ($extensionVersion)
    #set ($discard = $parameters.put('extensionVersion', $extensionVersion))
  #elseif ($request.extensionVersion)
    #set ($discard = $parameters.put('extensionVersion', $request.extensionVersion))
  #end
  #if ($xback)
    #set ($discard = $parameters.put('xback', $xback))
  #elseif ($request.xback)
    #set ($discard = $parameters.put('xback', $request.xback))
  #end
  #if ($request.section)
    #set ($discard = $parameters.put('section', $request.section))
  #end
  #set ($queryString = '')
  #foreach ($entry in $parameters.entrySet())
    #set ($queryString = "$queryString&amp;$escapetool.url($entry.key)=$escapetool.url($entry.value)")
  #end
$doc.getURL($xcontext.action, $queryString.substring(1))##
#end

#macro (handleExtensionRequest)
  #if ($request.confirm)
    #if ($services.csrf.isTokenValid($request.form_token))
      #if ($request.actioninstall)
        #installExtension($request.extensionId $request.extensionVersion $extensionNamespace)
      #elseif ($request.actionuninstall)
        #uninstallExtension($request.extensionId $request.extensionVersion $extensionNamespace)
      #else
        $response.sendRedirect("#getExtensionURL()")
      #end
    #elseif ($xcontext.action == 'get')
      # AJAX request. The CSRF token expired. We only redisplay the extension because the resubmission confirmation doesn't fit nicely in-line.
      $response.sendRedirect("#getExtensionURL()")
    #else
      $response.sendRedirect($services.csrf.getResubmissionURL())
    #end
  #else
    ## Display the extension.
    #set ($extension = $extensionManager.resolve($request.extensionId, $request.extensionVersion))
    #if ($extension)
      #displayExtension($extension)
    #else
      {{info}}$msg.get('extensions.advancedSearch.noResults', ["**{{{$!request.extensionId}}}**", "**{{{$!request.extensionVersion}}}**"]){{/info}}
    #end
  #end
#end

#macro (printThrowable $throwable)
  $throwable.class: #if(!$throwable.message)null#else$throwable.message#end

  #foreach($stackTraceElement in $throwable.stackTrace)
    ~    at $stackTraceElement
  #end
  #if ($throwable.cause)
    Caused by: #printThrowable($throwable.cause)
  #end
#end

#macro (getThrowableRootCauseMessage $throwable)
  #if ($throwable.cause)
    #getThrowableRootCauseMessage($throwable.cause)
  #else
    $!{throwable.message}##
  #end
#end

#macro (printStatusLog $status)
  #foreach ($log in $status.log)
    #set ($logLevel = $log.level.toString().toLowerCase())
    * (% class="extension-log-item extension-log-item-$logLevel" %)(((
        #if ($log.throwable)
          #set ($message = "#getThrowableRootCauseMessage($log.throwable)")
          #if ($message.trim() == '')
            #set ($message = $log.formattedMessage)
          #end
          $message

          (((
            #printThrowable($log.throwable)
          )))
        #else
          $log.formattedMessage
        #end
      )))
  #end
#end

#macro (computeXBack)
  #set ($xback = "$!{request.xback}")
  #if ($xback == '')
    #set ($params = '')
    #foreach ($parameterName in $request.parameterNames)
      #if (!$parameterName.startsWith('action') &amp;&amp; !$parameterName.startsWith('extension'))
        #foreach ($value in $request.getParameterValues($parameterName))
          #set ($params = "${params}&amp;${parameterName}=${value}")
        #end
      #end
    #end
    #if ($params.length() &gt; 0)
      #set ($params = $params.substring(1))
    #end
    #set ($xback = $doc.getURL($xcontext.action, $params))
  #end
#end

#macro (determineExtensionStatus $extension $extensionStatus $extensionStatusMessage)
  #set ($currentVersion = $NULL)
  #if ($extension.isInstalled())
    #set ($status = 'installed')
  #else
    #set ($status = $extension.repository.id.id)
    #if ($status != 'core')
      ## An extension, either local or remote, that might be available to install.
      ## Check if a different version of this extension is installed or is a core dependency.
      #set ($currentVersion = $extensionManager.getCoreExtension($extension.id.id))
      #if ($currentVersion)
        #set ($status = 'remote-core')
        #if ($currentVersion.id.equals($extension.id))
          #set ($status = 'core')
        #end
      #else
        #set ($currentVersion = $extensionManager.getInstalledExtension($extension.id.id, $extensionNamespace))
        #if ($currentVersion)
          #set ($status = 'remote-installed')
          #if ($currentVersion.id.equals($extension.id))
            #set ($status = 'installed')
          #end
        #else
          #set ($status = 'remote')
        #end
      #end
    #end
  #end
  #set ($message = $NULL)
  #if ($status != 'remote')
    #set ($message = $msg.get("extensions.info.status.$status", [$currentVersion.id.version.value]))
  #end
  #set ($extensionStatus = $NULL)
  #setVariable ("$extensionStatus" $status)
  #set ($extensionStatusMessage = $NULL)
  #setVariable ("$extensionStatusMessage" $message)
#end
{{/velocity}}</content>
</xwikidoc>
